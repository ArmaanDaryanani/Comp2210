import java.util.Arrays;

/**
* Defines a library of selection methods
* on arrays of ints.
*
* @author   Armaan Daryanani (ajd0101@auburn.edu)
* @author   Dean Hendrix (dh@auburn.edu)
* @version  01/29/23
*
*/
public final class Selector {

    /**
     * Can't instantiate this class.
     *
     * D O   N O T   C H A N G E   T H I S   C O N S T R U C T O R
     *
     */
    private Selector() { }


    /**
     * Selects the minimum value from the array a. This method
     * throws IllegalArgumentException if a is null or has zero
     * length. The array a is not changed by this method.
     */
     public static int min(int[] a)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }
        else
        {
            int min = a[0];
            for (int i : a)
            {
                if (i < min)
                {
                    min = i;
                }
            }
            return min;
        }
    }


    /**
     * Selects the maximum value from the array a. This method
     * throws IllegalArgumentException if a is null or has zero
     * length. The array a is not changed by this method.
     */
    public static int max(int[] a)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }
        else
        {
            int max = a[0];
            for (int i : a)
            {
                if (i > max)
                {
                    max = i;
                }
            }
            return max;
        }
    }


    /**
     * Selects the kth minimum value from the array a. This method
     * throws IllegalArgumentException if a is null, has zero length,
     * or if there is no kth minimum value. Note that there is no kth
     * minimum value if k < 1, k > a.length, or if k is larger than
     * the number of distinct values in the array. The array a is not
     * changed by this method.
     */
    public static int kmin(int[] a, int k)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }
        else if (k <= 0 || k > a.length)
        {
            throw new IllegalArgumentException("kth value must be valid.");
        }
        else
        {
            int[] dedupedA = new int[a.length];
            int index = 0;
            int dupedCount = 0;
            
            //creates a duplicate for sorting
            int[] duplicateA = new int[a.length];
            int index3 = 0;
            for (int r : a)
            {
                duplicateA[index3] = r;
                index3++;
            }
            
            Arrays.sort(duplicateA);
            
            for (int i : duplicateA)
            {
                if(index != duplicateA.length - 1)
                {
                    if (i == duplicateA[index + 1])
                    {
                        i = 0;
                        dupedCount++;
                    }
                }
                dedupedA[index] = i;
                index++;

            }
            
            Arrays.sort(dedupedA);

            int[] resultA = new int[dedupedA.length - dupedCount];
            int index2 = 0;
            for(int j : dedupedA)
            {
                if (j != 0)
                {
                    resultA[index2] = j;
                    index2++;
                }
            
            }
            
            if (k > resultA.length)
            {
                throw new IllegalArgumentException("kth value must be valid.");
            }

            if (k == 1)
            {
                return Selector.min(a);
            }
            
            if (k == a.length)
            {
                return Selector.max(a);
            }
            
            else 
            {
                return resultA[k - 1];
            }

        }
    }


    /**
     * Selects the kth maximum value from the array a. This method
     * throws IllegalArgumentException if a is null, has zero length,
     * or if there is no kth maximum value. Note that there is no kth
     * maximum value if k < 1, k > a.length, or if k is larger than
     * the number of distinct values in the array. The array a is not
     * changed by this method.
     */
    public static int kmax(int[] a, int k) {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }
        else if (k == 0 || k > a.length)
        {
            throw new IllegalArgumentException("kth value must be valid.");
        }
        else
        {
            int[] dedupedA = new int[a.length];
            int index = 0;
            int dupedCount = 0;
            
            //creates a duplicate for sorting
            int[] duplicateA = new int[a.length];
            int index3 = 0;
            for (int r : a)
            {
                duplicateA[index3] = r;
                index3++;
            }
            
            Arrays.sort(duplicateA);

            for (int i : duplicateA)
            {
                if(index != duplicateA.length - 1)
                {
                    if (i == duplicateA[index + 1])
                    {
                        i = 0;
                        dupedCount++;
                    }
                }
                dedupedA[index] = i;
                index++;

            }
            Arrays.sort(dedupedA);

            int[] resultA = new int[dedupedA.length - dupedCount];
            int index2 = 0;
            for(int j : dedupedA)
            {
                if (j != 0)
                {
                    resultA[index2] = j;
                    index2++;
                }
             
            }
            
            if (k > resultA.length)
            {
                throw new IllegalArgumentException("kth value must be valid.");
            }

            if (k == 1)
            {
                return Selector.max(a);
            }

            if (k == a.length)
            {
                return Selector.min(a);
            }

            else
            {
                return resultA[resultA.length - k];
            }
        }
    }


    /**
     * Returns an array containing all the values in a in the
     * range [low..high]; that is, all the values that are greater
     * than or equal to low and less than or equal to high,
     * including duplicate values. The length of the returned array
     * is the same as the number of values in the range [low..high].
     * If there are no qualifying values, this method returns a
     * zero-length array. Note that low and high do not have
     * to be actual values in a. This method throws an
     * IllegalArgumentException if a is null or has zero length.
     * The array a is not changed by this method.
     */
    public static int[] range(int[] a, int low, int high)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }
        else
        {
            int[] medianA = new int[a.length];
            int index = 0;
            int matched = 0;

            for (int i : a)
            {
                if (i >= low && i <= high)
                {
                    matched++;
                    medianA[index] = i;
                    index++;
                }

            }


            int[] resultA = new int[matched];
            int index2 = 0;

            for (int j : medianA)
            {
                if (j != 0)
                {
                    resultA[index2] = j;
                    index2++;
                }

            }

            return resultA;
        }
    }



    /**
     * Returns the smallest value in a that is greater than or equal to
     * the given key. This method throws an IllegalArgumentException if
     * a is null or has zero length, or if there is no qualifying
     * value. Note that key does not have to be an actual value in a.
     * The array a is not changed by this method.
     */
    public static int ceiling(int[] a, int key)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }

        int[] indexList = new int[a.length];
        int matched = 0;
        int index = 0;
        for (int i : a)
        {
            if (i >= key)
            {
                indexList[index] = index + 1;
                matched++;
            }
            index++;
        }
        if (matched == 0)
        {
            throw new IllegalArgumentException("No qualifying value.");
        }

        int[] resultA = new int[matched];
        int index2 = 0;
        for (int j : indexList)
        {
            if (j != 0)
            {
                resultA[index2] = a[j - 1];
                index2++;
            }
        }

        return Selector.min(resultA);

    }


    /**
     * Returns the largest value in a that is less than or equal to
     * the given key. This method throws an IllegalArgumentException if
     * a is null or has zero length, or if there is no qualifying
     * value. Note that key does not have to be an actual value in a.
     * The array a is not changed by this method.
     */
    public static int floor(int[] a, int key)
    {
        if (a == null || a.length == 0)
        {
            throw new IllegalArgumentException("Array cannot be empty or null.");
        }

        int[] indexList = new int[a.length];
        int matched = 0;
        int index = 0;
        for (int i : a)
        {
            if (i <= key)
            {
                indexList[index] = index + 1;
                matched++;
            }
            index++;
        }
        if (matched == 0)
        {
            throw new IllegalArgumentException("No qualifying value.");
        }

        int[] resultA = new int[matched];
        int index2 = 0;
        for (int j : indexList)
        {
            if (j != 0)
            {
                resultA[index2] = a[j - 1];
                index2++;
            }
        }

        return Selector.max(resultA);

    }

}
